version: '2.1'
orbs:
  slack: circleci/slack@4.1
jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: circleci/php:8.0-node-browsers

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      # - image: redis:3
      - image: circleci/mysql:5.7
        command: mysqld --default-authentication-plugin=mysql_native_password
        environment:
          MYSQL_USER: circleci
          MYSQL_DATABASE: ryoabarth_portfolio
          MYSQL_ROOT_PASSWORD: 'circleci'
          MYSQL_PASSWORD: 'circleci'

    steps:
      - checkout
      - run:
          name: Install MySQL driver
          command: |
            sudo docker-php-ext-configure pdo_mysql --with-pdo-mysql=mysqlnd
            sudo docker-php-ext-install zip bcmath pdo_mysql
      - run:
          name: Install Node
          command: |
            curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -
            sudo apt-get install -y nodejs
      # Download and cache dependencies

      # install php extensions
      - run:
          name: Install PHP Extensions
          command: |
            sudo apt-get install -y libpng-dev
            sudo docker-php-ext-install gd
      # composer cache
      - restore_cache:
          keys:
          # "composer.json" can be used if "composer.json"
          # is not committed to the repository.
          - composer-v1-{{ checksum "composer.lock" }}
          # fallback to using the latest cache if no exact match is found
          - composer-v1-
      - run: composer install -n --prefer-dist
      - save_cache:
          key: composer-v1-{{ checksum "composer.lock" }}
          paths:
            - vendor

      # node cache
      - restore_cache:
          keys:
            - node-v4-{{ checksum "package.json" }}
            - node-v4-
      - run: npm install
      - save_cache:
          key: node-v4-{{ checksum "package.json" }}
          paths:
            - node_modules
            - ~/.yarn

      # create .env
      - run:
          name: "Create Environment file and generate app key"
          command: |
            rm .env.testing
            mv .env.circleci .env.testing
            php artisan key:generate --env=testing
      # prepare the database
      - run: touch storage/testing.sqlite
      - run: php artisan migrate --seed --env=testing

      - run:
          name: Run Laravel Server
          command: php artisan serve --env=testing
          background: true

      - run:
          command: |
            google-chrome --version
            chromedriver --version
      - run:
          name: Update Chrome Driver
          command: |
              CHROME_VERSION="$(google-chrome --version)"
              CHROMEDRIVER_RELEASE="$(echo $CHROME_VERSION | sed 's/^Google Chrome //')"
              CHROMEDRIVER_RELEASE=${CHROMEDRIVER_RELEASE%%.*}
              # php artisan dusk:chrome-driver $CHROMEDRIVER_RELEASE
      # run tests with phpunit
      - run: ./vendor/bin/phpunit

  deploy:
    machine:
      enabled: true
    steps:
      - run:
          name: SSH deploy
          command: |
            ssh -p 10022 ryoabarth@sv8260.xserver.jp 'source ~/.bash_profile; cd ~/ryo-abarth.net/portfolio && git pull'
            ssh -p 10022 ryoabarth@sv8260.xserver.jp 'source ~/.bash_profile; cd ~/ryo-abarth.net/portfolio && composer install'
            ssh -p 10022 ryoabarth@sv8260.xserver.jp 'source ~/.bash_profile; cd ~/ryo-abarth.net/portfolio && php artisan migrate'
            ssh -p 10022 ryoabarth@sv8260.xserver.jp 'source ~/.bash_profile; cd ~/ryo-abarth.net/portfolio && php artisan queue:restart'
            ssh -p 10022 ryoabarth@sv8260.xserver.jp 'source ~/.bash_profile; cd ~/ryo-abarth.net/portfolio && php artisan view:clear'
            ssh -p 10022 ryoabarth@sv8260.xserver.jp 'source ~/.bash_profile; cd ~/ryo-abarth.net/portfolio && php artisan cache:clear'

workflows:
  version: 2
  workflow:
    jobs:
    - build
    - deploy:
        requires:
          - build
